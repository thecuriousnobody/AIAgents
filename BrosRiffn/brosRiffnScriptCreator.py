from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI
from config import GROQ_API_KEY
import os

topic = "Shaming, scolding, and chewing out in Indian cultural settings, examining cultural norms of discipline and communication in Indian society and beyond"
num_guests = 5

os.environ["GROQ_API_KEY"] = GROQ_API_KEY

if __name__ == '__main__':
    llm = ChatOpenAI(
        openai_api_base="https://api.groq.com/openai/v1",
        openai_api_key=os.getenv("GROQ_API_KEY"),
        model_name="llama3-70b-8192"
    )

    host_info = {
        "name": "Rajeev Kumar",
        "email": "theideasandboxpodcast@gmail.com",
        "website": "tisb.world",
        "whatsapp": "3096797200"
    }

    content_generator = Agent(
        role="Content Generator",
        goal=f"Find interesting tidbits, historical facts, information from contemporary culture, and historical background related to {topic} to make the podcast conversation engaging.",
        backstory=f"You are an AI assistant whose job is to find interesting content for the 'Bros Riffn' podcast about {topic}. Look for relevant information from various cultures around the world, including European, Australian, South American, and indigenous populations, on how they deal with of shaming, correcting, critiquing, respect for elders. Identify patterns among certain demographics and provide insights that can enrich the podcast discussion.",
        verbose=False,
        allow_delegation=False,
        llm=llm
    )

    content_critic = Agent(
        role="Content Critic",
        goal=f"Critique the content generated by the Content Generator based on its relevance to {topic}, its potential to make the podcast conversation interesting, and its accuracy and credibility.",
        backstory=f"You are an AI assistant whose job is to critique the content generated by the Content Generator. When evaluating the content, consider the following criteria: 1. Is the content relevant to {topic} and does it have the potential to make the podcast conversation interesting? 2. Is the information accurate, credible, and sourced from reliable references? 3. Does the content provide diverse perspectives from different cultures and demographics? Provide constructive feedback to help improve the quality and relevance of the generated content.",
        verbose=False,
        llm=llm
    )

    generate_content = Task(
        description=f"Find interesting tidbits, historical facts, information from contemporary culture, and historical background related to {topic} to make the podcast conversation engaging.",
        agent=content_generator,
        expected_output="A list of interesting content related to the topic, including tidbits, historical facts, contemporary cultural information, and historical background from various cultures and demographics.",
    )

    critique_content = Task(
        description=f"Critique the content generated by the Content Generator based on its relevance to {topic}, its potential to make the podcast conversation interesting, and its accuracy and credibility.",
        agent=content_critic,
        expected_output=f"Constructive feedback on the generated content, evaluating its relevance to {topic}, potential to make the podcast conversation interesting, accuracy, credibility, and diversity of perspectives from different cultures and demographics.",
    )

    crew = Crew(
        agents=[content_generator, content_critic],
        tasks=[generate_content, critique_content],
        verbose=1,
        process=Process.sequential
    )

    output = crew.kickoff()
    print(output)

    # Write the generated content to a file
    try:
        with open("/Users/rajeevkumar/Documents/BrosRiffn/podcast_content.txt", "w") as file:
            file.write(f"Topic: {topic}\n\n")
            file.write(output)
    except IOError as e:
        print(f"An error occurred while writing to the file: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")